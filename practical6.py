# -*- coding: utf-8 -*-
"""PRACTICAL6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VfsOrhMkD8iLFycwFMAE-NRD13lDucKO
"""

def minimax(depth, node_index, is_max, scores, height):

    if depth == height:
        return scores[node_index]

    if is_max:
        return max(minimax(depth + 1, node_index * 2, False, scores, height),
                   minimax(depth + 1, node_index * 2 + 1, False, scores, height))
    else:
        return min(minimax(depth + 1, node_index * 2, True, scores, height),
                   minimax(depth + 1, node_index * 2 + 1, True, scores, height))

# Scores from the image (leaf nodes)
scores = [4, 3, 6, 2, 2, 1, 9, 5, 3, 1, 5, 4, 7, 5]

# Height of the tree (number of levels from root to leaf)
height = 3  # Count the levels in the image (including the root level)

# Start the minimax algorithm from the root node (depth 0, index 0)
optimal_value = minimax(0, 0, True, scores, height)

print("The optimal value is:", optimal_value)

def solve_csp(graph):
    colors = {}


    def is_safe(node, color):
        for neighbor in graph.get(node, []):
            if neighbor in colors and colors[neighbor] == color:
                return False
        return True


    def solve_recursive(node_index):

        if node_index == len(graph):
            return True

        node = list(graph.keys())[node_index]
        for color in range(1, num_colors + 1):
            if is_safe(node, color):
                colors[node] = color
                if solve_recursive(node_index + 1):
                    return True
                del colors[node]

        return False

    for num_colors in range(1, len(graph) + 1):
        colors.clear()
        if solve_recursive(0):
            return colors

    return None
graph_example = {
    '1': ['2', '4'],
    '2': ['1', '5', '4', '3'],
    '3': ['2', '4', '6'],
    '4': ['2', '3', '5', '6'],
    '5': ['1', '2', '4', '6'],
    '6': ['3', '4', '5']
}

solution = solve_csp(graph_example)

if solution:
    print("Coloring Solution:")
    for node, color in solution.items():
        print(f"Node {node}: Color {color}")
else:
    print("No solution found.")

