# -*- coding: utf-8 -*-
"""C3_42_Siddharth_tiwari_AI_lab3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uUPUecEuvv67BZ5YnyioR-skbcsH2Gma

Name - Siddharth Tiwari <br>
Batch - C3 - 42 <br>
AI LAB - 3
"""



"""IDDFS"""

graph = {
    'S': [('A', 1), ('B', 3), ('C', 5)],
    'A': [('S', 1), ('G', 3)],
    'B': [('S', 3), ('F', 5)],
    'C': [('S', 5), ('E', 2)],
    'G': [('A', 3)],
    'F': [('B', 5)],
    'E': [('C', 2), ('Z', 1)],
    'Z': [('E', 1)]
}

def depthLimitedSearch(graph, currentNode, goal, depth):

    if depth == 0:
        return currentNode == goal

    if depth > 0:
        for neighbor, _ in graph.get(currentNode, []):
            if depthLimitedSearch(graph, neighbor, goal, depth - 1):
                return True

    return False

def iterativeDeepeningDFS(graph, start, goal, maxDepth):

    for depth in range(maxDepth + 1):
        if depthLimitedSearch(graph, start, goal, depth):
            return True

    print("Goal not found")
    return False

start = 'S'
goal = 'Z'
maxDepth = 5

result = iterativeDeepeningDFS(graph, start, goal, maxDepth)
if result:
    print(f"Goal '{goal}' found within depth {maxDepth}")
else:
    print(f"Goal '{goal}' not found within depth {maxDepth}")

"""Uniform Cost search"""

import heapq

graph = {
    'S': [('A', 1), ('B', 3), ('C', 5)],
    'A': [('S', 1), ('G', 3)],
    'B': [('S', 3), ('F', 5)],
    'C': [('S', 5), ('E', 2)],
    'G': [('A', 3)],
    'F': [('B', 5)],
    'E': [('C', 2), ('Z', 1)],
    'Z': [('E', 1)]
}

def uniformCostSearch(graph, start, goal):
    pq = []
    heapq.heappush(pq, (0, start))

    visited = []

    while pq:
        currentCost, currentNode = heapq.heappop(pq)

        if currentNode == goal:
            return currentCost

        if currentNode not in visited:
            visited.append(currentNode)

            for neighbour, cost in graph[currentNode]:
                if neighbour not in visited:
                    new_cost = currentCost + cost
                    heapq.heappush(pq, (new_cost, neighbour))

    print("Goal not found")
    return None

start = 'S'
goal = 'Z'

result = uniformCostSearch(graph, start, goal)
print("Cost to reach the goal:", result)

